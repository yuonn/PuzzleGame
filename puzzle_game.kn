var board: [][]int
var nextboard: [][]int
var clearboard: [][]int
var Block: draw@Tex
var Imagesize: int
var Blocksize: int
var click_up: []bool
var click_down: []bool
var click_left: []bool
var click_right: []bool
var click_easy: bool
var click_normal: bool
var click_hard: bool
var click_conf: bool
var wndMain: wnd@Wnd
var drawMain: wnd@Draw
var mouseX: int
var mouseY: int

func shuffle(level: []char)
	if(level = "easy")
		for i(0, 4)
			var rnd1: int :: lib@rnd(0, 1)
			if(rnd1 = 0)
				do @slideleft(2)
			end if
			var rnd2: int :: lib@rnd(0, 1)
			if(rnd2 = 0)
				do @slideup(2)
			end if
		end for
	end if
	
	if(level = "normal")
		for i(0, 3)
			var rnd1: int :: lib@rnd(0, 1)
			do @slideleft(rnd1 * 2 + 1)
			var rnd2: int :: lib@rnd(0, 1)
			do @slideup(rnd2 * 2 + 1)
		end for
	end if
	
	if(level = "hard")
		for i(0, 3)
			var rnd1: int :: lib@rnd(0, 4)
			do @slideleft(rnd1)
			var rnd2: int :: lib@rnd(0, 4)
			do @slideup(rnd2)
		end for
	end if
end func

func refresh_board()
	do @board :: [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]
	do @nextboard :: [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]
end func

func viewBoard()
	for y(0, 4)
		for x(0, 4)
			var blocknum: int :: @board[y][x]
			do @Block.draw((x * @Blocksize + 100) $ float, (y * @Blocksize + 100) $ float, ((blocknum % 5) * @Blocksize) $ float, (((blocknum - blocknum % 5) / 5) * @Blocksize) $ float, @Blocksize $ float, @Blocksize $ float, draw@white)
		end for
	end for
end func

func drawMainOnMouseDownL(wnd: wnd@Draw, x: int, y: int)
	var width: int
	var height: int
	do wnd.getPos(&, &, &width, &height)
	do x :: x * 700 / width
	do y :: y * 700 / height
	if(0 < y & y < 100)
		for i(1, 5)
			if(i * 100 < x & x < (i + 1) * 100)
				do @click_up[i - 1] :: true
				do dbg@print("\{i}true!\n")
			end if
		end for
		if(0 < x & x < 100)
			do @click_easy :: true
		end if
		if(600 < x & x < 700)
			do @click_normal :: true
		end if
	end if
	if(0 < x & x < 100)
		for i(1, 5)
			if(i * 100 < y & y < (i + 1) * 100)
				do @click_left[i - 1] :: true
			end if
		end for
	end if
	if(600 < y & y < 700)
		for i(1, 5)
			if(i * 100 < x & x < (i + 1) * 100)
				do @click_down[i - 1] :: true
			end if
		end for
		if(0 < x & x < 100)
			do @click_hard :: true
		end if
		if(600 < x & x < 700)
			do @click_conf :: true
		end if
	end if
	if(600 < x & x < 700)
		for i(1, 5)
			if(i * 100 < y & y < (i + 1) * 100)
				do @click_right[i - 1] :: true
			end if
		end for
	end if
end func

func slideleft(i: int)
	do @nextboard[i][0] :: @board[i][1]
	do @nextboard[i][1] :: @board[i][2]
	do @nextboard[i][2] :: @board[i][3]
	do @nextboard[i][3] :: @board[i][4]
	do @nextboard[i][4] :: @board[i][0]
	do @board :: ##@nextboard
	do lib@sleep(100)
end func

func slideright(i: int)
	do @nextboard[i][0] :: @board[i][4]
	do @nextboard[i][1] :: @board[i][0]
	do @nextboard[i][2] :: @board[i][1]
	do @nextboard[i][3] :: @board[i][2]
	do @nextboard[i][4] :: @board[i][3]
	do @board :: ##@nextboard
	do lib@sleep(100)
end func

func slideup(i: int)
	do @nextboard[0][i] :: @board[1][i]
	do @nextboard[1][i] :: @board[2][i]
	do @nextboard[2][i] :: @board[3][i]
	do @nextboard[3][i] :: @board[4][i]
	do @nextboard[4][i] :: @board[0][i]
	do @board :: ##@nextboard
	do lib@sleep(100)
end func

func slidedown(i: int)
	do @nextboard[0][i] :: @board[4][i]
	do @nextboard[1][i] :: @board[0][i]
	do @nextboard[2][i] :: @board[1][i]
	do @nextboard[3][i] :: @board[2][i]
	do @nextboard[4][i] :: @board[3][i]
	do @board :: ##@nextboard
	do lib@sleep(100)
end func

func keyinput()
	if(@click_easy)
		do @refresh_board()
		do @shuffle("easy")
		do @click_easy :: false
	end if
	if(@click_normal)
		do @refresh_board()
		do @shuffle("normal")
		do @click_normal :: false
	end if
	if(@click_hard)
		do @refresh_board()
		do @shuffle("hard")
		do @click_hard :: false
	end if
	if(@click_conf)
		do @refresh_board()
		var rnd: int :: lib@rnd(0, 5)
		do @Block :: draw@makeTex("res/\{rnd}.png")
		do @click_conf :: false
	end if
	if((input@key(%left) & input@key(%_1)) | @click_left[0])
		do @slideleft(0)
		do @click_left[0] :: false
	end if
	if(input@key(%left) & input@key(%_2) | @click_left[1])
		do @slideleft(1)
		do @click_left[1] :: false
	end if
	if(input@key(%left) & input@key(%_3) | @click_left[2])
		do @slideleft(2)
		do @click_left[2] :: false
	end if
	if(input@key(%left) & input@key(%_4) | @click_left[3])
		do @slideleft(3)
		do @click_left[3] :: false
	end if
	if(input@key(%left) & input@key(%_5) | @click_left[4])
		do @slideleft(4)
		do @click_left[4] :: false
	end if
	if(input@key(%right) & input@key(%_1) | @click_right[0])
		do @slideright(0)
		do @click_right[0] :: false
	end if
	if(input@key(%right) & input@key(%_2) | @click_right[1])
		do @slideright(1)
		do @click_right[1] :: false
	end if
	if(input@key(%right) & input@key(%_3) | @click_right[2])
		do @slideright(2)
		do @click_right[2] :: false
	end if
	if(input@key(%right) & input@key(%_4) | @click_right[3])
		do @slideright(3)
		do @click_right[3] :: false
	end if
	if(input@key(%right) & input@key(%_5) | @click_right[4])
		do @slideright(4)
		do @click_right[4] :: false
	end if
	if(input@key(%up) & input@key(%_1) | @click_up[0])
		do @slideup(0)
		do @click_up[0] :: false
	end if
	if(input@key(%up) & input@key(%_2) | @click_up[1])
		do @slideup(1)
		do @click_up[1] :: false
	end if
	if(input@key(%up) & input@key(%_3) | @click_up[2])
		do @slideup(2)
		do @click_up[2] :: false
	end if
	if(input@key(%up) & input@key(%_4) | @click_up[3])
		do @slideup(3)
		do @click_up[3] :: false
	end if
	if(input@key(%up) & input@key(%_5) | @click_up[4])
		do @slideup(4)
		do @click_up[4] :: false
	end if
	if(input@key(%down) & input@key(%_1) | @click_down[0])
		do @slidedown(0)
		do @click_down[0] :: false
	end if
	if(input@key(%down) & input@key(%_2) | @click_down[1])
		do @slidedown(1)
		do @click_down[1] :: false
	end if
	if(input@key(%down) & input@key(%_3) | @click_down[2])
		do @slidedown(2)
		do @click_down[2] :: false
	end if
	if(input@key(%down) & input@key(%_4) | @click_down[3])
		do @slidedown(3)
		do @click_down[3] :: false
	end if
	if(input@key(%down) & input@key(%_5) | @click_down[4])
		do @slidedown(4)
		do @click_down[4] :: false
	end if
end func

func clearflag(): bool
	for i(0, 4)
		for j(0, 4)
			if(@board[i][j] <> @clearboard[i][j])
				ret false
			end if
		end for
	end for
	ret true
end func

func wndMainOnActivate(wnd: wnd@Wnd, active: bool, minimized: bool)
	if(active & !minimized)
		do @drawMain.focus()
	end if
end func

func main()
	do @wndMain :: wnd@makeWnd(null, %aspect, 700, 700, "SophiaPuzzle")
	do @wndMain.onActivate :: @wndMainOnActivate
	do @drawMain :: wnd@makeDraw(@wndMain, 0, 0, 700, 700, %scale, %scale, false)
	var texBack: draw@Tex :: draw@makeTex("res/back.png")
	var clearLabel: draw@Tex :: draw@makeTex("res/clear.png")
	do @refresh_board()
	do @clearboard :: [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]
	do @Imagesize :: 500
	do @Blocksize :: @Imagesize / 5
	var rnd: int :: lib@rnd(0, 5)
	do @Block :: draw@makeTex("res/\{rnd}.png")
	do @drawMain.onMouseDownL :: @drawMainOnMouseDownL
	do @drawMain.focus()
	do @click_down :: [false, false, false, false, false]
	do @click_up :: [false, false, false, false, false]
	do @click_left :: [false, false, false, false, false]
	do @click_right :: [false, false, false, false, false]
	
	while(wnd@act())
		do @keyinput()
		do texBack.draw(0.0, 0.0, 0.0, 0.0, 700.0, 700.0, draw@white)
		do @viewBoard()
		if(@clearflag())
			do clearLabel.draw(201.0, 400.0, 0.0, 0.0, 298.0, 126.0, draw@white)
		end if
		do draw@render(30)
	end while
end func
